using WSantosDev.EventSourcing.Accounts.Commands;
using WSantosDev.EventSourcing.Commons;

namespace WSantosDev.EventSourcing.Accounts.Test
{
    public sealed class OpenTest : IDisposable
    {
        private readonly Database _databaseSetup;

        private readonly AccountViewStore _readModelStore;
        private readonly AccountStore _store;

        public OpenTest()
        {
            _databaseSetup = DatabaseFactory.Create();

            _readModelStore = _databaseSetup.ViewStore;
            _store = _databaseSetup.Store;
        }

        [Fact]
        public async Task Success()
        {
            //Arrange
            AccountId accountId = Guid.NewGuid();
            var sut = new Open(_store);

            //Act
            var opened = await sut.ExecuteAsync(new OpenParams(accountId, 1_000_000m));

            //Assert
            Assert.True(opened);
            Assert.True(await _databaseSetup.Store.ByIdAsync(accountId));
            Assert.True(await _databaseSetup.ViewDbContext.ByIdAsync(accountId));
        }

        [Fact]
        public async Task SuccessWithNoInitialDeposit()
        {
            //Arrange
            AccountId accountId = Guid.NewGuid();
            var sut = new Open(_store);

            //Act
            var opened = await sut.ExecuteAsync(new OpenParams(accountId, 0m));
            
            //Assert
            Assert.True(opened);
            var account = await _store.ByIdAsync(accountId);
            Assert.True(account);
            Assert.Equal<decimal>(0m, account.Get().Balance);
            var accountReadModel = await _readModelStore.ByIdAsync(accountId);
            Assert.True(accountReadModel);
            Assert.Equal(0m, accountReadModel.Get().Balance);
        }

        [Fact]
        public async Task FailureEmptyAccountId()
        {
            //Arrange
            var accountId = AccountId.Empty;
            var sut = new Open(_store);

            //Act
            var opened = await sut.ExecuteAsync(new OpenParams(accountId, 1_000_000m));

            //Assert
            Assert.False(opened);
            Assert.Equal(Errors.EmptyAccountId, opened.ErrorValue);
            Assert.False(await _readModelStore.ByIdAsync(accountId));
        }

        [Fact]
        public async Task FailureAccountAlreadyExists()
        {
            //Arrange
            AccountId accountId = Guid.NewGuid();
            await _store.StoreAsync(Account.Open(accountId, 1m));
            
            var sut = new Open(_store);

            //Act
            var opened = await sut.ExecuteAsync(new OpenParams(accountId, 1_000_000m));

            //Assert
            Assert.False(opened);
            Assert.Equal(CommandErrors.AccountAlreadyExists, opened.ErrorValue);
            Assert.True(await _store.ByIdAsync(accountId));
        }

        public void Dispose() =>
            DatabaseDisposer.Dispose(_databaseSetup);
    }
}
